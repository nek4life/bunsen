import pyramid_beaker
import pyramid_jinja2

from pyramid.config import Configurator
from sqlalchemy import engine_from_config

from {{package}}.models import DBSession

def main(global_config, **settings):
    """ This function returns a Pyramid WSGI application.
    """
    config = Configurator(settings=settings)
    
    # Configure database engine
    engine = engine_from_config(settings, 'sqlalchemy.')
    DBSession.configure(bind=engine)

    # Configure Beaker sessions and caching
    session_factory = pyramid_beaker.session_factory_from_settings(settings)
    config.set_session_factory(session_factory)
    pyramid_beaker.set_cache_regions_from_settings(settings)

    # Configure Jinja2 templates, including a renderer factory for .jinja2 files
    config.include("pyramid_jinja2")

    # Configure static views
    config.add_static_view('static', '{{package}}:static', cache_max_age=3600)

    # Configure Root-Relative static asset views. For usage documenation see
    # http://packages.python.org/pyramid_assetviews/#usage
    config.include("pyramid_assetviews")
    filenames = ['favicon.ico', 'robots.txt', 'humans.txt', 'crossdomain.xml']
    config.add_asset_views('{{package}}:static', filenames=filenames)

    # Configure custom exception views to use a custom 500 view in production
    # set the custom_500_view setting to ``true``.
    config.include('{{package}}.views.exceptions')
    
    # Include Routes
    config.include("{{package}}.routes:includeme")

    # Using config.scan() will search for decorators that supply further
    # configuration such as the @view_config and @subscriber decorators
    config.scan("{{package}}.views")
    config.scan("{{package}}.subscribers")

    # Initialize Database Tables
    config.scan("{{package}}.models")
    return config.make_wsgi_app()

